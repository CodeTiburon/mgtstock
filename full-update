<?php

class Colors {
	private $foreground_colors = array();
	private $background_colors = array();
 
	public function __construct() {
		// Set up shell colors
		$this->foreground_colors['black'] = '0;30';
		$this->foreground_colors['dark_gray'] = '1;30';
		$this->foreground_colors['blue'] = '0;34';
		$this->foreground_colors['light_blue'] = '1;34';
		$this->foreground_colors['green'] = '0;32';
		$this->foreground_colors['light_green'] = '1;32';
		$this->foreground_colors['cyan'] = '0;36';
		$this->foreground_colors['light_cyan'] = '1;36';
		$this->foreground_colors['red'] = '0;31';
		$this->foreground_colors['light_red'] = '1;31';
		$this->foreground_colors['purple'] = '0;35';
		$this->foreground_colors['light_purple'] = '1;35';
		$this->foreground_colors['brown'] = '0;33';
		$this->foreground_colors['yellow'] = '1;33';
		$this->foreground_colors['light_gray'] = '0;37';
		$this->foreground_colors['white'] = '1;37';

		$this->background_colors['black'] = '40';
		$this->background_colors['red'] = '41';
		$this->background_colors['green'] = '42';
		$this->background_colors['yellow'] = '43';
		$this->background_colors['blue'] = '44';
		$this->background_colors['magenta'] = '45';
		$this->background_colors['cyan'] = '46';
		$this->background_colors['light_gray'] = '47';
	}
 
	// Returns colored string
	public function getColoredString($string, $foreground_color = null, $background_color = null) {
		$colored_string = "";

		// Check if given foreground color found
		if (isset($this->foreground_colors[$foreground_color])) {
			$colored_string .= "\033[" . $this->foreground_colors[$foreground_color] . "m";
		}
		// Check if given background color found
		if (isset($this->background_colors[$background_color])) {
			$colored_string .= "\033[" . $this->background_colors[$background_color] . "m";
		}

		// Add string and end coloring
		$colored_string .=  $string . "\033[0m";

		return $colored_string;
	}
 
	// Returns all foreground color names
	public function getForegroundColors() {
		return array_keys($this->foreground_colors);
	}
 
	// Returns all background color names
	public function getBackgroundColors() {
		return array_keys($this->background_colors);
	}
}

class TaskManager
{
	private $cliColors = null;
	private $tasks = array();

	public function __construct()
	{
		$this->cliColors = new Colors;
	}

	public function addTask($cmd, $message)
	{
		$this->tasks[] = array(
			'cmd' => $cmd,
			'message' => $message
		);
	}

	public function run()
	{
		// Run tasks
		foreach ($this->tasks as $task)
		{
			echo $this->cliColors->getColoredString($task['message'], "white", "green") . "\n";
			$output = shell_exec($task['cmd']);
			echo $output;
		}
	}

	public function clear()
	{
		$this->tasks = array();
	}
}


// Default config
$params = array(
	'refreshDB' => true,
	'seed' => false
);

// Parse command line params
$shortopts = '';
$longopts = array(
	'seed::',
	'help::'
);

$options = getopt($shortopts, $longopts);

if (isset($options['seed'])) {
	$params['seed'] = true;
}

if (isset($options['help'])) {
	echo 'Usage:
  full-update [--seed]
Arguments:
    --seed 				To seed database
	    '."\n";
	exit;
}

$manager = new TaskManager();

$manager->addTask('git pull', 'Pulling updates from git');
$manager->addTask('composer.phar update', 'Updating composer');
$manager->addTask('bower update', 'Updating bower');
$manager->addTask('gulp', 'Running gulp');

if ($params['seed']) {
	$manager->addTask('php artisan migrate:refresh --seed', 'Refresh DB and seed with Artisan');
} else if ($params['refreshDB']) {
	$manager->addTask('php artisan migrate:refresh', 'Refresh DB with Artisan');
}

$manager->run();

?>